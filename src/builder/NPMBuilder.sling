
/*
 * This file is part of Eqela Rocks
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

class is Builder:

func getBuilderId as string:
	return "npm"

func canBuild(dir as File) as bool
{
	assert dir
	if dir.entry("package.json").isFile() || dir.entry("gulpfile.js").isFile():
		return true
	return false
}

func execute(ctx as MyContext, sourceDirectory as File, destinationDirectory as File) as bool
{
	var dir = assert sourceDirectory:
		ctx.error("No source directory")
	assert dir.isDirectory():
		ctx.error("Source directory does not exist: `" .. ctx.fileToString(dir) .. "'")
	ctx.debug("Using source directory: `" .. ctx.fileToString(dir) .. "'")
	var packagejson = dir.entry("package.json")
	if packagejson.isFile() {
		var npm = assert ctx.findCommand(ctx.getNpmPath(), "npm")
		var pl = ProcessLauncher.forFile(npm)
		pl.addToParams("install")
		pl.setCwd(dir)
		var r = pl.execute()
		assert r == 0:
			ctx.error("`npm install' returned error status " .. String.forInteger(r))
	}
	var gulpfile = dir.entry("gulpfile.js")
	if gulpfile.isFile() {
		var npx = assert ctx.findCommand(ctx.getNpxPath(), "npx")
		var pl = ProcessLauncher.forFile(npx)
		pl.addToParams("gulp")
		pl.setCwd(dir)
		var r = pl.execute()
		assert r == 0:
			ctx.error("`npx' returned error status " .. String.forInteger(r))
	}
	var destdir = destinationDirectory
	if destdir {
		destdir.createDirectoryRecursive()
		var builddir = dir.entry("build")
		var ee = builddir.entries()
		while ee {
			var file = ee.next()
			if not file:
				break
			var dest = destdir.entry(file.baseName())
			ctx.debug("Copying `" .. ctx.fileToString(file) .. "' -> `" .. ctx.fileToString(dest) .. "' ..")
			assert file.copyFileOrDirectoryTo(dest):
				ctx.error("Failed to copy `" .. ctx.fileToString(file) .. "' -> `" .. ctx.fileToString(dest) .. "'")
		}
	}
	return true
}
